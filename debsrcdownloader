#!/usr/bin/python
import sys
import os
import os.path
import socket
import shutil
import subprocess
import re
from urlparse import urlparse
from pprint import pprint
import bz2
import time
import urllib
import urllib2
from cStringIO import StringIO

def main():
    if "--help" in sys.argv or "-h" in sys.argv or len(sys.argv) > 3:
        usage()
    installedPkgs, srcsList = None, None
    if len(sys.argv) == 1:
        installedPkgs, srcsList = getLocalInstalledPkgs()
    elif len(sys.argv) == 2:
        installedPkgs, srcsList = getRemoteInstalledPkgs(sys.argv[1])
    elif len(sys.argv) == 3:
        installedPkgs, srcsList = sys.argv[1:3]
    debsrc = DebSrcDownloader(installedPkgs, srcsList)
    debsrc.download()

def usage():
    print """
debsrcdownloader [installed-pkgs-file sources.list] | [[user@]hostname]

debsrcdownloader will download all the Debian packages for a Ubuntu system
organised by source repository.

If it is run with no arguments, then it assumes that it is being run
on the system it should fetch the source packages for.  If you want to
download source packages for another system you either need to provide:
    installed-pkgs-file : a file generated from dpkg --list, and
    sources.list : a copy of /etc/apt/sources.list
or:
    [user@]hostname : the hostname of the system from which debsrcdownloader
                      will try and fetch the installed-pkgs-file and
                      sources.list from remotely using SSH (this may require
                      you to give a password on that system).

The downloaded source packages will be saved in a sub-directory of the
current working directory called "download".
    """
    sys.exit(1)

def getLocalInstalledPkgs():
    hostname = socket.gethostname()
    installedPkgs = "%s_installedpkgs.txt" % hostname
    cmdline = "dpkg --list > %s" % installedPkgs
    err = subprocess.call(cmdline, shell=True)
    if err != 0:
        print "%s failed with error code %d" % (cmdline, err)
        print "(is this really an Ubuntu system?)"
        sys.exit(2)
    origSrcsList = "/etc/apt/sources.list"
    destSrcsList = "%s_sources.list" % hostname
    if os.path.isfile(origSrcsList):
        shutil.copy(origSrcsList, destSrcsList)
    else:
        print "No %s found (is this really an Ubuntu system?)"
        sys.exit(2)
    return installedPkgs, destSrcsList

def getRemoteInstalledPkgs(userAndHostname):
    if "@" in userAndHostname:
        username, hostname = userAndHostname.split("@", 1)
    else:
        hostname = userAndHostname
    installedPkgs = "%s_installedpkgs.txt" % hostname
    cmdline = "ssh %s dpkg --list > %s" % (userAndHostname, installedPkgs)
    err = subprocess.call(cmdline, shell=True)
    if err != 0:
        print "%s failed with error code %d" % (cmdline, err)
        sys.exit(2)
    origSrcsList = "/etc/apt/sources.list"
    destSrcsList = "%s_sources.list" % hostname
    cmdline = "scp %s:%s %s" % (userAndHostname, origSrcsList, destSrcsList)
    err = subprocess.call(cmdline, shell=True)
    if err != 0:
        print "%s failed with error code %d" % (cmdline, err)
        sys.exit(2)
    return installedPkgs, destSrcsList

class DebSrcDownloader(object):
    TokensRE = re.compile(r"\S+")
    SrcsFieldRE = re.compile(r"(\S+):\ *(.*)")
    def __init__(self, installedPkgs, srcsList):
        if not os.path.isfile(installedPkgs):
            print "%s is missing" % installedPkgs
            sys.exit(3)
        if not os.path.isfile(srcsList):
            print "%s is missing" % srcsList
            sys.exit(3)
        self.packages = {}
        self.toFetch = []
        self.processSrcsList(srcsList)
        self.processInstalledPkgs(installedPkgs)

    def processSrcsList(self, srcsList):
        srcsIn = file(srcsList, "r")
        for line in srcsIn:
            if line.startswith("deb-src"):
                tokens = self.TokensRE.findall(line)
                uri, dist = tokens[1:3]
                if not uri.endswith("/"):
                    uri += "/"
                for component in tokens[3:]:
                    self.getSourceMetadata(uri, dist, component)
        srcsIn.close()

    def getSourceMetadata(self, uri, dist, component):
        print "Getting metadata for %s %s" % (dist, component)
        sourcesUrl = "%sdists/%s/%s/source/Sources.bz2" % (uri, dist, component)
        sourcesPage = bz2.decompress(readPage(sourcesUrl))
        sourcess = StringIO(sourcesPage)
        repodata = {"URI":        uri,
                    "Dist":       dist,
                    "Component":  component}
        metadata = {}
        metadata.update(repodata)
        field = ""
        for line in sourcess:
            if line[0] == ' ':
                if field == "Files":
                    filename = self.TokensRE.findall(line)[2]
                    metadata['Files'].append(filename)
                    for line in sourcess:
                        if line[0] != ' ':
                            break
                        filename = self.TokensRE.findall(line)[2]
                        metadata['Files'].append(filename)
                elif field == "Binary":
                    self.saveBinariesInMetadata(metadata, line)
                    for line in sourcess:
                        if line[0] != ' ':
                            break
                        self.saveBinariesInMetadata(metadata, line)
            field, value = self.getFieldAndValue(line)
            if field == "Package":
                if metadata:
                    binaries = metadata.get("Binary", [])
                    version  = metadata.get("Version", "")
                    for binary in binaries:
                        self.packages[(binary, version)] = metadata
                    metadata = {}
                    metadata.update(repodata)
                metadata[field] = value
            elif field == "Files":
                metadata[field] = []
            elif field == "Binary":
                self.saveBinariesInMetadata(metadata, value)
            elif field == "Version":
                metadata[field] = value
            elif field == "Directory":
                metadata[field] = value

    def getFieldAndValue(self, line):
        field, value = "", ""
        match = self.SrcsFieldRE.search(line)
        if match:
            field = match.group(1).strip()
            value = match.group(2).strip()
        return field, value

    def saveBinariesInMetadata(self, metadata, value):
        for binary in value.split(","):
            binary = binary.strip()
            if binary != "":
                metadata.setdefault("Binary", []).append(binary)

    def processInstalledPkgs(self, installedPkgs):
        pkgsIn = file(installedPkgs, "r")
        for line in pkgsIn.readlines()[5:]:
            binPkg, version = self.TokensRE.findall(line)[1:3]
            metadata = self.packages.get((binPkg, version), {})
            if not metadata:
                versions = [v for p,v in self.packages.keys() if p==binPkg]
                if versions:
                    # punting
                    srcMetadata = self.packages[(binPkg, versions[0])]
                    metadata = self.duplicateMetadataForNewVersion(srcMetadata,
                                                                   version)
            package = metadata.get("Package", "")
            if package:
                self.toFetch.append((binPkg, version))
            else:
                print "Can't find source package for %s %s" % (binPkg, version)
        pkgsIn.close()
        print "" 

    def duplicateMetadataForNewVersion(self, srcMetadata, newVersion):
        metadata = {}
        metadata.update(srcMetadata)
        metadata['Version'] = newVersion
        for binPkg in metadata['Binary']:
            self.packages[(binPkg, newVersion)] = metadata
        return metadata

    def download(self):
        if not os.path.isdir("download"):
            os.mkdir("download")
        os.chdir("download")
        for binPkg, version in self.toFetch:
            metadata = self.packages.get((binPkg, version), {})
            if not metadata.get("Downloaded", False):
                self.downloadFiles(metadata)
                metadata["Downloaded"] = True

    def downloadFiles(self, metadata):
        if metadata['Dist'] == "drbl":
            destDir = "drbl/%s" % metadata['Directory']
        else:
            destDir = "ubuntu/%s" % metadata['Directory']
        if not os.path.isdir(destDir):
            os.makedirs(destDir)
        for filename in metadata["Files"]:
            print "Downloading %s" % filename
            destPath = "%s/%s" % (destDir, filename)
            if os.path.exists(destPath):
                print destPath, "already downloaded!"
                continue
            url = "%s/%s/%s" % (metadata['URI'], metadata['Directory'], filename)
            net = urllib2.urlopen(url)
            with open(destPath, "wb") as out:
                shutil.copyfileobj(net, out)

def readPage(url):
    """Reads a web page off a website"""
    net = None
    page = ''
    for retry in range(2):
        if retry:
            print "Retrying #", retry
            time.sleep(0.50)
        try:
            net = urllib.urlopen(url)
            page = net.read()
            break
        except:
            pass
    if net is not None:
        net.close()
    return page


if __name__ == "__main__":
    main()

# vim: set ft=python
