#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
from os import path
from ConfigParser import SafeConfigParser
from datetime import date, timedelta
import calendar
import urllib
import urllib2
import re
from hashlib import sha256
import csv
from pprint import pprint

class BobSlydell(object):
    def __init__(self):
        self.here = path.abspath(path.dirname(__file__))
        self.prefix = "kasdir_"
        self.config = SafeConfigParser({'username':None,
                                        'password':None})
        self.config.add_section('login')
        self.config.read([path.join(self.here, 'slydell.cfg'),
                          path.expanduser('~/slydell.cfg')])
        self.fromWhen = None
        self.toWhen   = None
        self.churn    = False
        self.processArgs()
        self.reports = [ filename for filename in os.listdir(self.here)
                         if filename.startswith(self.prefix) ]
        self.reports.sort()
 
    def processArgs(self):
        args = sys.argv[1:]
        while len(args):
            if args[0] == "--username":
                args.pop(0)
                if len(args) == 0: self.usage()
                self.config.set('login', 'username', args.pop(0))
            elif args[0] == "--password":
                args.pop(0)
                if len(args) == 0: self.usage()
                self.config.set('login', 'password', args.pop(0))
            elif args[0] == "--churn":
                args.pop(0)
                self.churn = True
            elif args[0] == "--help":
                self.usage()
            elif self.fromWhen is None:
                self.fromWhen = args.pop(0)
            elif self.toWhen is None:
                self.toWhen = args.pop(0)
            else:
                self.usage()

    def usage(self):
        print "slydell [options] [from] [to]"
        print "Fills you in on changes to the company directory"
        print
        print "[--help]  displays this help"
        print
        print "[--churn] generate a churn report"
        print
        print "[--username <name>]  [--password <pwd>]"
        print "username and password to the NuViewHR system can be given"
        print "as command line options, or provided in the slydell.cfg file"
        print
        print "  from:  defaults to the last report generated"
        print "    to:  defaults to a new report generated today"
        print "These can either be the filename of a report or a date"
        print "which slydell will use to find the nearest report"
        print "The date should be in ISO format yyyy-mm-dd, or one of "
        print "the keywords yesterday, today, oldest, latest, previous"
        sys.exit(1)

    def getReports(self):
        if len(self.reports) == 0:
            print "No previous reports found!!!\n"
            saveTodaysReport()
            sys.exit(1)
        fromReport = toReport = ''
        if self.toWhen is None:
            toReport = self.saveTodaysReport()
        else:
            toReport = self.findReport(self.toWhen)
        if self.fromWhen is None:
            fromReport = self.reports[-1]
            if fromReport == toReport and len(self.reports) > 1:
                fromReport = self.reports[-2]
        else:
            fromReport = self.findReport(self.fromWhen)

        return fromReport, toReport

    def findReport(self, whenFor):
        if whenFor == "today":
            whenFor = date.today().isoformat()
        elif whenFor == "yesterday":
            whenFor = (date.today() - timedelta(days=1)).isoformat()
        elif whenFor == "oldest":
            whenFor = self.reports[0]
        elif whenFor == "latest":
            whenFor = self.reports[-1]
        elif whenFor == "previous":
            whenFor = self.reports[-2]
        if len(whenFor) == 10 and whenFor[4] == whenFor[7] == '-':
            filename = self.findClosestReportToDate(whenFor)
            if filename:
                return filename
        if whenFor in self.reports:
            return whenFor
        filepath = path.abspath(whenFor)
        if path.dirname(filepath) == self.here:
            filename = filepath[len(self.here) + 1:]
            if filename in self.reports:
                return filename
        print "No report matches %s" % whenFor
        sys.exit(1)

    def findClosestReportToDate(self, whenFor):
        t1 = date(*(int(v) for v in whenFor.split("-")))
        prflen = len(self.prefix)
        report1 = self.reports[0]
        d1 = date(int(report1[prflen:prflen+4]),
                  int(report1[prflen+5:prflen+7]),
                  int(report1[prflen+8:prflen+10]))
        if t1 < d1:
            return report1
        for report2 in self.reports[1:]:
            d2 = date(int(report2[prflen:prflen+4]),
                      int(report2[prflen+5:prflen+7]),
                      int(report2[prflen+8:prflen+10]))
            mid = d1 + timedelta(days=1) + (d2 - d1) / 2;
            if d1 <= t1 < mid:
                return report1
            elif mid <= t1 < d2:
                return report2
            d1 = d2
            report1 = report2
        return report1

    def saveTodaysReport(self):
        filename = "%s%s.csv" % (self.prefix, date.today().isoformat())
        filepath = path.join(self.here, filename)
        hr = NuViewHR(self.config)
        pwdok = hr.login()
        if not pwdok:
            print "Wrong password"
            sys.exit(1)
        hr.saveDirectory(filepath)
        return filename

class NuViewHR(object):
    def __init__(self, config):
        self.username = config.get('login', 'username')
        self.password = config.get('login', 'password')
        if not self.username or not self.password:
            print "username/password needed to log in to NuViewHR"
            sys.exit(1)
        cookieProcessor = urllib2.HTTPCookieProcessor()
        self.opener = urllib2.build_opener(cookieProcessor)
        self.opener.addheaders = [('User-agent', 'User-Agent=Mozilla/5.0')]
        urllib2.install_opener(self.opener)
        self.url = "https://kas.prod07.nuviewhr.com/WrkFlw.aspx"
        self.token = ''

    def login(self):
        net = self.opener.open(self.url)
        page = net.read()
        net.close()
        post = {}
        tokenMatch = re.search(r'NuView.setToken\("(\d+)"\)', page)
        if not tokenMatch:
            return False
        self.token  = tokenMatch.groups(1)[0]
        passwd = 'hashed' + sha256(self.token + self.password).hexdigest()
        post.update({'F_Token':         self.token,
                     'F_Cmd':           'onClick',
                     'F_Ctl':           'Login',
                     'N_Logout_main_1': 'No',
                     'N_User_main_1':   self.username,
                     'N_Pswd_main_1':   passwd})
        net = self.opener.open(self.url, urllib.urlencode(post))
        page = net.read()
        net.close()
        failure = re.search(r'You could not be logged in', page)
        if failure:
            return False
        return True

    def saveDirectory(self, filepath):
        post = {'F_Token':               self.token,
                'F_Application':         'ESS',
                'F_Mode':                '',
                'F_Cmd':                 'Find',
                'F_CmdLast':             '',
                'F_CmdSend':             'CSV',
                'F_Ctl':                 '',
                'F_Frame':               '',
                'F_View':                'find',
                'F_NavForm':             'CmpDir',
                'F_RowCnt_main':         '1',
                'F_Id_main_1':           '0',
                'N_Div_main_1':          '',
                'N_FndFirstName_main_1': '',
                'N_FndLastName_main_1':  '',
                'N_Loc_main_1':          '',
                'N_Unt_main_1':          ''}
        net = self.opener.open(self.url, urllib.urlencode(post))
        file(filepath, "w").write(net.read())
        net.close()

class BobPorter(object):
    MinLocSize = 5
    def __init__(self, fromFileName, toFileName):
        self.fromFileName = fromFileName
        self.toFileName   = toFileName
        self.fromData     = self.loadReport(fromFileName)
        self.toData       = self.loadReport(toFileName)
 
    def loadReport(self, filename):
        here = path.abspath(path.dirname(__file__))
        filepath = path.join(here, filename)
        if not path.isfile(filepath):
            print "File %s not found"
            sys.exit(1)
        #print "Loading %s" % filename
        reader = csv.DictReader(file(filepath))
        report = {}
        for row in reader:
            firstName = row.get('First Name', '')
            lastName  = row.get('Last Name', '')
            if lastName == "Board of Directors": continue
            name = "%s %s" % (firstName, lastName)
            if row.get('Location') == "India - Bangalore":
                name = firstName.split()[0]
                if name == "Basavaraj":
                    name += "u"
            report[name] = row
        return report

    def quickSummary(self, username=None):
        teamTotals = {}
        locaTotals = {}
        coyTotal = 0
        haveJob = False
        for row in self.toData.itervalues():
            workaccount = row.get('Email Work', '').lower().split('@')[0]
            if not haveJob and username == workaccount:
                haveJob = True
            team = row.get('Team', '***')
            teamTotals[team] = teamTotals.get(team, 0) + 1
            loca = row.get('Location', '***')
            locaTotals[loca] = locaTotals.get(loca, 0) + 1
            coyTotal += 1

        print "Current:",
        for team, total in teamTotals.iteritems():
            print "%s:%d" % (team[:3], total),
        print "Total:%d" % coyTotal
        locBySize = {}
        othSize = 0
        for loca, total in locaTotals.iteritems():
            if total <= self.MinLocSize:
                othSize += total
                continue
            loc = self.getLoc(loca)
            #print "%s = %s" % (loc, loca)
            locBySize.setdefault(total, []).append(loc)

        print "        ",
        for size in sorted(locBySize.keys(), reverse=True):
            for loc in locBySize.get(size, []):
                print "%s:%d" % (loc, size),
        if othSize:
            print "Others:%d" % (othSize),
        print

        if username is not None:
            if haveJob:
                print "Congratulations you still have a job, today\n"
            else:
                print "Not going to work here anymore\n"

    def getLoc(self, location):
        loc = location.split('-')[-1]
        loc = loc.split(',')[0]
        if loc.startswith("US "): loc = loc[3:]
        if loc.startswith("Mexico "): loc = "Mex"
        loc = loc.strip()
        if " " in loc:
            loc = "".join(word[0] for word in loc.split())
        loc = loc[:3]
        return loc

    def compareReports(self):
        print "Comparing %s with %s" % (self.fromFileName, self.toFileName)
        oldKeys = set(self.fromData.iterkeys())
        newKeys = set(self.toData.iterkeys())
        hired = newKeys - oldKeys
        gone  = oldKeys - newKeys
        teamHires  = {}
        teamGoners = {}
        teamChange = {}
        locaHires  = {}
        locaGoners = {}
        locaChange = {}
        def printRow(sign, row):
            print "%s %s %s, %s, %s in %s" % (sign,
                                           row.get('First Name', ''), 
                                           row.get('Last Name', ''), 
                                           row.get('Location', ''), 
                                           row.get('Job Title', ''),
                                           row.get('Team', ''))
        def printTeamSummary(title, group):
            if group:
                print title,
                for team, total in group.iteritems():
                    print "%s:%d" % (team[:3], total),
                print "Total: %d" % reduce(lambda x, y: x+y, group.itervalues(), 0)
        def printLocationSummary(title, group):
            if group:
                print title,
                for loca, total in group.iteritems():
                    print "%s:%d" % (self.getLoc(loca), total),
                print
        if hired:
            print "New hires:", len(hired)
            for name in hired:
                row = self.toData[name]
                team = row.get('Team', '***')
                loca = row.get('Location', '***')
                #if not team.startswith("Dev"): continue
                printRow("+", row)
                teamHires[team]  = teamHires.get(team, 0) + 1
                teamChange[team] = teamChange.get(team, 0) + 1
                locaHires[loca]  = locaHires.get(loca, 0) + 1
                locaChange[loca] = locaChange.get(loca, 0) + 1
        if gone:
            print "Exploring other opportunities:", len(gone)
            for name in gone:
                row = self.fromData[name]
                team = row.get('Team', '***')
                loca = row.get('Location', '***')
                #if not team.startswith("Dev"): continue
                printRow("-", row)
                teamGoners[team] = teamGoners.get(team, 0) + 1
                teamChange[team] = teamChange.get(team, 0) - 1
                locaGoners[loca] = locaGoners.get(loca, 0) + 1
                locaChange[loca] = locaChange.get(loca, 0) - 1
        if not hired and not gone:
            print "No changes"
        else:
            printTeamSummary("Gone:   ", teamGoners)
            printLocationSummary("        ", locaGoners)
            printTeamSummary("Hired:  ", teamHires)
            printLocationSummary("        ", locaHires)
            printTeamSummary("Change: ", teamChange)
            printLocationSummary("        ", locaChange)

    def calculateChurn(self, title):
        spaces = " " * len(title)
        print title,
        teamGoners = {}
        teamTotals = {}
        locaGoners = {}
        locaTotals = {}
        oldKeys = set(self.fromData.iterkeys())
        newKeys = set(self.toData.iterkeys())
        gone  = oldKeys - newKeys
        for name in oldKeys:
            row = self.fromData[name]
            team = row.get('Team', '***')
            teamTotals[team] = teamTotals.get(team, 0) + 1
            loca = row.get('Location', '***')
            locaTotals[loca] = locaTotals.get(loca, 0) + 1
        for name in gone:
            row = self.fromData[name]
            team = row.get('Team', '***')
            teamGoners[team] = teamGoners.get(team, 0) + 1
            loca = row.get('Location', '***')
            locaGoners[loca] = locaGoners.get(loca, 0) + 1
        for team, total in teamTotals.iteritems():
            #if not team.startswith("Dev"): continue
            churn = teamGoners.get(team, 0)
            churnRate = float(churn) / total * 100
            print "%s:%d/%d(%.1f%%)" % (team[:3], churn, total, churnRate),
        totChurn = len(gone)
        total = len(oldKeys)
        totChurnRate = float(totChurn) / total * 100
        print "Total:%d/%d(%.1f%%)" % (totChurn, total, totChurnRate)
        othChurn = 0
        othTotal = 0
        print spaces,
        for loca, total in locaTotals.iteritems():
            churn = locaGoners.get(loca, 0)
            if total <= self.MinLocSize:
                othChurn += churn
                othTotal += total
                continue
            if churn:
                loc = self.getLoc(loca)
                churnRate = float(churn) / total * 100
                print "%s:%d/%d(%.1f%%)" % (loc, churn, total, churnRate),
        if othChurn:
            othChurnRate = float(othChurn) / othTotal * 100
            print "Others:%d/%d(%.1f%%)" % (othChurn, othTotal, othChurnRate),
        print
        #self.compareReports()
        #self.quickSummary()

def churnReports(bob1):
    print "Churn report"
    prflen = len(bob1.prefix)
    report1 = bob1.reports[0]
    d1 = date(int(report1[prflen:prflen+4]),
              int(report1[prflen+5:prflen+7]),
              1)
    reportn = bob1.reports[-1]
    dn = date(int(reportn[prflen:prflen+4]),
              int(reportn[prflen+5:prflen+7])+1,
              1)
    while d1 < dn:
        m1 = d1.month
        m1reports = [ filename for filename in bob1.reports
                      if int(filename[prflen+5:prflen+7]) == m1 ]
        m1reports.sort()
        m2reports = [ filename for filename in bob1.reports
                      if int(filename[prflen+5:prflen+7]) == m1+1 ]
        m2reports.sort()
        if m2reports:
            m1reports.append(m2reports[0])
        if len(m1reports) > 1:
            # isn't going to report people who start and finish within a month
            #print "Comparing %s with %s" % (m1reports[0], m1reports[-1])
            bob2 = BobPorter(m1reports[0], m1reports[-1])
            bob2.calculateChurn(d1.strftime("%b:"))
        d1 += timedelta(days=calendar.monthrange(d1.year, d1.month)[1])

def normalReports(bob1):
    fromReport, toReport = bob1.getReports()
    bob2 = BobPorter(fromReport, toReport)
    if fromReport != toReport:
        bob2.compareReports()
    if bob1.toWhen is None:
        bob2.quickSummary(bob1.config.get('login', 'username'))
    else:
        bob2.quickSummary()

def main():
    bob1 = BobSlydell()
    if bob1.churn:
        churnReports(bob1)
    else:
        normalReports(bob1)

if __name__ == "__main__":
    main()

